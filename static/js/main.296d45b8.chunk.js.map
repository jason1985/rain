{"version":3,"sources":["App.js","index.js"],"names":["App","useState","hourly","setHourly","jPop","setJpop","jTime","setJtime","useEffect","a","axios","get","params","lat","lon","units","exclude","appid","process","res","data","console","log","getWeather","map","hour","dt","Math","round","pop","series","name","joptions","chart","foreColor","height","type","zoom","enabled","fill","gradient","opacityFrom","opacityTo","dataLabels","stroke","curve","tooltip","theme","title","text","align","grid","yaxis","lines","show","xaxis","categories","labels","format","min","max","className","options","ReactDOM","render","document","getElementById"],"mappings":"2PA4LeA,MApKf,WAAgB,IAAD,EACeC,mBAAS,IADxB,mBACNC,EADM,KACEC,EADF,OAEWF,mBAAS,IAFpB,mBAENG,EAFM,KAEAC,EAFA,OAGaJ,mBAAS,IAHtB,mBAGNK,EAHM,KAGCC,EAHD,KAKbC,qBAAU,YACQ,uCAAG,4BAAAC,EAAA,sEACCC,IAAMC,IA1BV,mDA0B2B,CACvCC,OAAQ,CAENC,IAAK,QACLC,IAAK,SACLC,MAAO,WACPC,QAAS,WACTC,MAAOC,sCARM,OACXC,EADW,OAYjBhB,EAAUgB,EAAIC,KAAKlB,QACnBmB,QAAQC,IAAIpB,GAbK,2CAAH,qDAehBqB,KACC,IAEHf,qBAAU,WACRD,EAASL,EAAOsB,KAAI,SAACC,GAAD,OAAoB,IAAVA,EAAKC,GAAY,SAE/CrB,EAAQH,EAAOsB,KAAI,SAACC,GAAD,OAAUE,KAAKC,MAAiB,IAAXH,EAAKI,SAC7CR,QAAQC,IAAIhB,GACZe,QAAQC,IAAIlB,KACX,CAACF,IAEJ,IAAM4B,EAAS,CACb,CACEC,KAAM,iBACNX,KAAMhB,IAsEN4B,EAAW,CACbC,MAAO,CACLC,UAAW,OACXC,OAAQ,IACRC,KAAM,OACNC,KAAM,CACJC,SAAS,IAGbC,KAAM,CACJC,SAAU,CACRF,SAAS,EACTG,YAAa,IACbC,UAAW,IAGfC,WAAY,CACVL,SAAS,GAEXM,OAAQ,CACNC,MAAO,YAETC,QAAS,CACPC,MAAO,QAETC,MAAO,CACLC,KAAM,iBACNC,MAAO,UAETC,KAAM,CACJC,MAAO,CACLC,MAAO,CACLC,MAAM,KAIZC,MAAO,CACLnB,KAAM,WACNoB,WAAYlD,EACZmD,OAAQ,CACNC,OAAQ,QAGZN,MAAO,CACLO,IAAK,EACLC,IAAK,MAIT,OACE,qCACE,0DACA,qBAAKC,UAAU,UAAf,SACE,cAAC,IAAD,CAAO/B,OAAQA,EAAQgC,QAAS9B,EAAUI,KAAK,eClLvD2B,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,W","file":"static/js/main.296d45b8.chunk.js","sourcesContent":["import { useEffect, useState } from \"react\";\nimport axios from \"axios\";\nimport Chart from \"react-apexcharts\";\nimport \"./App.css\";\n\nconst URL_ONECALL = \"https://api.openweathermap.org/data/2.5/onecall?\";\n\nfunction UnixTime(number) {\n  if (!number) {\n    return \"\";\n  }\n  return new Date(number * 1000).toLocaleTimeString(\"en-US\");\n}\n\nfunction UnixDate(number) {\n  if (!number) {\n    return \"\";\n  }\n  return new Date(number * 1000).toLocaleDateString(\"en-US\");\n}\n\nlet jPop;\nlet jTime;\n\nfunction App() {\n  const [hourly, setHourly] = useState([]);\n  const [jPop, setJpop] = useState([]);\n  const [jTime, setJtime] = useState([]);\n\n  useEffect(() => {\n    const getWeather = async () => {\n      const res = await axios.get(URL_ONECALL, {\n        params: {\n          // q: \"ho chi minh\",\n          lat: 10.8231,\n          lon: 106.6297,\n          units: \"imperial\",\n          exclude: \"minutely\",\n          appid: process.env.REACT_APP_APIKEY,\n        },\n      });\n\n      setHourly(res.data.hourly);\n      console.log(hourly);\n    };\n    getWeather();\n  }, []);\n\n  useEffect(() => {\n    setJtime(hourly.map((hour) => hour.dt * 1000 + 24000000));\n\n    setJpop(hourly.map((hour) => Math.round(hour.pop * 100)));\n    console.log(jTime);\n    console.log(jPop);\n  }, [hourly]);\n\n  const series = [\n    {\n      name: \"chance to rain\",\n      data: jPop,\n    },\n  ];\n\n  const options = {\n    chart: {\n      // id: [\"time\"],\n    },\n    xaxis: {\n      type: \"datetime\",\n      categories: jTime,\n      labels: {\n        format: \"htt\",\n      },\n    },\n  };\n\n  var options1 = {\n    chart: {\n      id: \"chart2\",\n      type: \"area\",\n      height: 230,\n      foreColor: \"#ccc\",\n      toolbar: {\n        autoSelected: \"pan\",\n        show: false,\n      },\n    },\n    colors: [\"#00BAEC\"],\n    stroke: {\n      width: 3,\n    },\n    grid: {\n      borderColor: \"#555\",\n      clipMarkers: false,\n      yaxis: {\n        lines: {\n          show: false,\n        },\n      },\n    },\n    dataLabels: {\n      enabled: false,\n    },\n    fill: {\n      gradient: {\n        enabled: true,\n        opacityFrom: 0.55,\n        opacityTo: 0,\n      },\n    },\n    markers: {\n      size: 5,\n      colors: [\"#000524\"],\n      strokeColor: \"#00BAEC\",\n      strokeWidth: 3,\n    },\n    tooltip: {\n      theme: \"dark\",\n    },\n    xaxis: {\n      type: \"datetime\",\n      categories: jTime,\n    },\n    yaxis: {\n      min: 0,\n      tickAmount: 4,\n    },\n  };\n\n  var joptions = {\n    chart: {\n      foreColor: \"#ccc\",\n      height: 300,\n      type: \"area\",\n      zoom: {\n        enabled: false,\n      },\n    },\n    fill: {\n      gradient: {\n        enabled: true,\n        opacityFrom: 0.55,\n        opacityTo: 0,\n      },\n    },\n    dataLabels: {\n      enabled: false,\n    },\n    stroke: {\n      curve: \"straight\",\n    },\n    tooltip: {\n      theme: \"dark\",\n    },\n    title: {\n      text: \"Chance of Rain\",\n      align: \"center\",\n    },\n    grid: {\n      yaxis: {\n        lines: {\n          show: false,\n        },\n      },\n    },\n    xaxis: {\n      type: \"datetime\",\n      categories: jTime,\n      labels: {\n        format: \"htt\",\n      },\n    },\n    yaxis: {\n      min: 0,\n      max: 100,\n    },\n  };\n\n  return (\n    <>\n      <h1>Chance of Rain in Saigon</h1>\n      <div className=\"wrapper\">\n        <Chart series={series} options={joptions} type=\"area\" />\n      </div>\n    </>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}